#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any of our classes manually. It's great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

// Disable ANSI decoration (colors/spinners) for `serve` on Windows to avoid noisy output
$argvList = $_SERVER['argv'] ?? [];
$isServeCommand = isset($argvList[1]) && $argvList[1] === 'serve';
$isWindows = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';

// Respect NO_COLOR if already set, otherwise disable decoration for Windows + serve
$noColorEnv = getenv('NO_COLOR');
$disableDecoration = ($noColorEnv !== false) || ($isWindows && $isServeCommand);

// Create output with decoration disabled when requested
$consoleOutput = $disableDecoration
    ? new Symfony\Component\Console\Output\ConsoleOutput(\Symfony\Component\Console\Output\OutputInterface::VERBOSITY_NORMAL, false)
    : new Symfony\Component\Console\Output\ConsoleOutput();

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    $consoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
